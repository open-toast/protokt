/*
 * Copyright (c) 2019 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package com.toasttab.model;

import "protokt/protokt.proto";

message DeprecatedModel {
  option deprecated = true;

  string id = 1 [
    deprecated = true,
    (protokt.property).deprecation_message = "mildly deprecated"
  ];

  oneof deprecated_oneof {
    string option = 2 [
      deprecated = true,
      (protokt.property).deprecation_message = "mildly deprecated"
    ];
  }

  enum DeprecatedEnum {
    option deprecated = true;
    option (protokt.enum).deprecation_message = "more deprecated";

    OPTION_ONE = 0;
  }

  enum EnumWithDeprecation {
    OPTION_TWO = 0 [
      deprecated = true,
      (protokt.enum_value).deprecation_message = "mildly deprecated"
    ];
  }

  message NestedDeprecatedModel {
    option deprecated = true;
    option (protokt.class).deprecation_message = "more deprecated";

    string id = 1 [
      deprecated = true
    ];

    oneof deprecated_oneof {
      string option = 2 [
        deprecated = true
      ];
    }
  }
}

enum DeprecatedForeignEnum {
  option deprecated = true;

  OPTION_THREE = 0;
}

enum ForeignEnumWithDeprecation {
  OPTION_FOUR = 0 [
    deprecated = true
  ];
}
