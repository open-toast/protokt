# Copyright (c) 2022 Toast, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[versions]
autoService = "1.1.1"
grpc-java = "1.63.0"
grpc-kotlin = "1.4.1"
kotlinLogging = "5.1.0"
kotlinPoet = "1.16.0"
kotlinx-coroutines = "1.8.0"
kotlinx-serialization = "1.6.3"
ktlint = "1.2.1"
protobuf-java = "3.21.7"
protobuf-js = "7.2.6"
protobufGradlePlugin = "0.9.4"
slf4j = "2.0.13"

# build
androidGradlePlugin = "7.4.2"
animalSnifferGradlePlugin = "1.7.1"
binaryCompatibilityValidator = "0.14.0"
buildConfig = "5.3.5"
gradleMavenPublishPlugin = "0.25.3"
gummyBears = "0.8.0"
java = "11"
kotlin = "1.9.23"
pluginPublish = "1.2.1"
spotless = "6.21.0"

# benchmarks
datasets = "0.1.0"
download = "5.6.0"
jmh = "1.37"
wire = "4.9.9"

# test
classgraph = "4.8.153"
grpc-js = "1.8.14"
jackson = "2.17.0"
junit = "5.10.2"
truth = "1.4.2"

# third party
protoGoogleCommonProtos = "2.39.0"

[plugins]
buildConfig = { id = "com.github.gmazzo.buildconfig", version.ref = "buildConfig" }
download = { id = "de.undercouch.download", version.ref = "download" }
pluginPublish = { id = "com.gradle.plugin-publish", version.ref = "pluginPublish" }
wire = { id = "com.squareup.wire", version.ref = "wire" }

[libraries]
autoService = { module = "com.google.auto.service:auto-service", version.ref = "autoService" }
autoServiceAnnotations = { module = "com.google.auto.service:auto-service-annotations", version.ref = "autoService" }
grpc-kotlin-gen = { module = "io.grpc:protoc-gen-grpc-kotlin", version.ref = "grpc-kotlin" }
grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "grpc-java" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc-java" }
kotlinLogging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlinLogging" }
kotlinPoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinPoet" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
ktlint = { module = "com.pinterest.ktlint:ktlint-rule-engine", version.ref = "ktlint" }
ktlintRuleSetStandard = { module = "com.pinterest.ktlint:ktlint-ruleset-standard", version.ref = "ktlint" }
protobuf-gradlePlugin = { module = "com.google.protobuf:protobuf-gradle-plugin", version.ref = "protobufGradlePlugin" }
protobuf-java = { module ="com.google.protobuf:protobuf-java", version.ref = "protobuf-java" }
protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf-java" }
slf4jSimple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }

# build
androidGradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }
animalSnifferGradlePlugin = { module = "ru.vyarus:gradle-animalsniffer-plugin", version.ref = "animalSnifferGradlePlugin" }
binaryCompatibilityValidator = { module = "org.jetbrains.kotlinx:binary-compatibility-validator", version.ref = "binaryCompatibilityValidator" }
gradleMavenPublishPlugin = { module = "com.vanniktech:gradle-maven-publish-plugin", version.ref = "gradleMavenPublishPlugin" }
kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
spotlessGradlePlugin = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }

# benchmarks
jmh-core = { module = "org.openjdk.jmh:jmh-core", version.ref = "jmh" }
jmh-generator = { module = "org.openjdk.jmh:jmh-generator-annprocess", version.ref = "jmh" }
wireRuntime = { module = "com.squareup.wire:wire-runtime", version.ref = "wire" }

# third party
protoGoogleCommonProtos = { module = "com.google.api.grpc:proto-google-common-protos", version.ref = "protoGoogleCommonProtos" }

# test
classgraph = { module = "io.github.classgraph:classgraph", version.ref = "classgraph" }
grpc-kotlin-stub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "grpc-kotlin" }
grpc-testing = { module = "io.grpc:grpc-testing", version.ref = "grpc-java" }
jackson = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-vintage = { module = "org.junit.vintage:junit-vintage-engine" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
protobuf-lite = { module = "com.google.protobuf:protobuf-javalite", version.ref = "protobuf-java" }
truth = { module = "com.google.truth:truth", version.ref = "truth" }
