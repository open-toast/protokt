/*
 * Copyright (c) 2019 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.toasttab.protokt.codegen.impl

import com.squareup.kotlinpoet.FileSpec
import com.toasttab.protokt.codegen.annotators.Annotator
import com.toasttab.protokt.codegen.descriptor.FileDescriptorResolver
import com.toasttab.protokt.codegen.protoc.Protocol
import com.toasttab.protokt.codegen.protoc.fileName

object FileBuilder {
    fun buildFile(
        protocol: Protocol
    ): FileSpec? {
        val descs = Annotator.apply(protocol)
        if (descs.isEmpty() && protocol.desc.context.lite) {
            return null
        }

        val builder =
            FileSpec.builder(
                protocol.desc.kotlinPackage.toString(),
                fileName(protocol.desc.kotlinPackage, protocol.desc.name)
            ).apply {
                // https://github.com/square/kotlinpoet/pull/533
                addComment(
                    """
                        Generated by protokt version ${protocol.desc.context.version}. Do not modify.
                        Source: ${protocol.desc.name}
                    """.trimIndent()
                )
                indent("    ")
            }

        descs.forEach {
            builder.addType(it.type.typeSpec)
        }

        val fileDescriptorInfo = FileDescriptorResolver.resolveFileDescriptor(protocol)

        if (fileDescriptorInfo != null) {
            builder.addType(fileDescriptorInfo.fdp)
            fileDescriptorInfo.properties.forEach(builder::addProperty)
        }

        return builder.build()
    }
}
