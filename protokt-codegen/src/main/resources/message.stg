/*
 * Copyright (c) 2020 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "companion.stg"
import "dsl.stg"
import "options.stg"
import "renderers.stg"

message(message, entry, serialize, deserialize, plus, sizeof, inner, params, oneofs, options) ::= <<
<blockComment(message.documentation)><\\>
<suppressDeprecation(message)><\\>
<deprecated(message)><\\>
<if (entry.entry)><\\>
private <\\>
<else><\\>
@KtGeneratedMessage("<message.fullTypeName>")
<endif><\\>
class <message.name><if (!entry.entry)><\n>private constructor<endif>(
<if (entry.entry)>
    val key: <entry.kType>,
    val value: <entry.vType>
) : KtMessage {
<else>
    <params:{p |<\\>
        <blockComment(p.documentation)><\\>
        <deprecated(p)><\\>
        <messagePropertyOverrides()><\\>
        val <p.name>: <p.type><\\>
    }; separator=",\n"><if (params)>,<endif>
    val unknown: Map\<Int, Unknown> = emptyMap()
) : KtMessage<messageImplements()> {
<endif>
    <if (oneofs)>
    <oneofs:{it |<it>}; separator="\n\n">
    <else>
    <endif>
    override val messageSize<\\>
    <if (entry.entry)>
        get() = sizeof(key, value)<\n>
    <else><\\>
        <\ >by lazy { sizeof() }
    <endif>

    override fun serialize(serializer: KtMessageSerializer) {
        <serialize:{it | <\\>
            <if (it.std)><\\>
                <it.conditionals:{n |<\\>
                <if (it.skipDefaultValue && !entry.entry)><\\>
                    if <n.condition>{<\n><\\>
                        <t()><n.consequent><\n><\\>
                    \}<\\>
                <else><\\>
                    <n.consequent><\\>
                <endif><\\>
                }; separator="\n"><\\>
            <else><\\>
                when (<it.fieldName>) {<\n><\\>
                    <t()><it.conditionals:{x | is <x.condition> -><\n><\\>
                        <t()><t()><x.consequent>}; separator="\n    "><\n><\\>
                \}<\\>
            <endif><\\>
        }; separator="\n">
        <if (!entry.entry)><\\>
        if (unknown.isNotEmpty()) {<\n><\\>
            <t()>serializer.writeUnknown(unknown)<\n><\\>
        }
        <endif>
    }

    <if (!entry.entry)>
    private fun sizeof(): Int {
        var res = 0
        <sizeof:{it | <\\>
        <if(it.std)><\\>
            <it.conditionals:{n |<\\>
                <if (it.skipDefaultValue)><\\>
                    if <n.condition>{<\n><\\>
                        <t()>res += <n.consequent><\n><\\>
                    \}<\\>
                <else><\\>
                    res += <n.consequent><\\>
                <endif><\\>
            }; separator="\n"><\\>
        <else><\\>
            <if (!it.skipDefaultValue)><\\>
                res += <\\>
            <endif><\\>
            when (<it.fieldName>) {<\n><\\>
                <t()><it.conditionals:{x | is <x.condition> -><\n><\\>
                <t()><t()><if (it.skipDefaultValue)>res += <endif><x.consequent>}; separator="\n    "><\n><\\>
            \}<\\>
        <endif><\\>
        }; separator="\n">
        res += unknown.values.sumBy { it.sizeof() }
        return res
    }

    override fun equals(other: <if (options.wellKnownType)>kotlin.<endif>Any?): Boolean =
        other is <message.name> &&
            <params:{p | other.<p.name> == <p.name>}; separator=" &&\n"><\\>
            <if (params)> &&<endif>
            other.unknown == unknown

    override fun hashCode()<\\>
    <if (params)><\\>
    : Int {
        var result = unknown.hashCode()
        <params:{p | <\\>
        result = 31 * result + <p.name>.hashCode()<\\>
        }; separator="\n">
        return result
    }

    <else><\\>
    <\ >=
    <t()>unknown.hashCode()
    <endif>

    override fun toString(): String =
        "<message.name>(<\\>
        <if (params)><\\>
        " +
            <params:{p | "<p.name>=$<p.name>}; separator=", \" +\n">, " +
            "unknown=$unknown)"<\n>
        <else><\\>
            unknown=$unknown)"
        <endif>

    <dsl()>
    <endif>

    <companion()>
    <if (inner)>

    <inner><\\>
    <endif><\\>
}

>>
