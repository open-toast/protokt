/*
 * Copyright (c) 2020 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "renderers.stg"

entry(name, entry, properties, serialize, deserialize, sizeof) ::= <<
private class <name>(
    val key: <entry.kType>,
    val value: <entry.vType>
) : KtMessage {
    override val messageSize
        get() = sizeof(key, value)

    override fun serialize(serializer: KtMessageSerializer) {
        <serialize:{it|<it>}; separator="\n">
    }

    <entryCompanion()>
}

>>

entryCompanion() ::= <<
companion object Deserializer : KtDeserializer\<<name>\> {
    fun sizeof(key: <entry.kType>, value: <entry.vType>) =
        <sizeof:{it|<it>}; separator=" + ">

    override fun deserialize(deserializer: KtMessageDeserializer): <name> {
        <properties:{p | var <deserializeVar(p)>}; separator="\n">

        while (true) {
            when (deserializer.readTag()) {
                0 -> return <name>(<properties:{p | <deserializeWrapper(p)>}; separator=", ">)
                <deserialize:{d | <d.tag> -> <d.assignment.fieldName> = <d.assignment.value>}; separator="\n">
            }
        }
    }
}
>>

deserializeWrapper(p) ::= <%
    <p.name>
    <if (isMessage.(p.messageType))>
        <\ >?: <entry.vType> {}
    <endif>
%>

