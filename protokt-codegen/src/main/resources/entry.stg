/*
 * Copyright (c) 2020 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "renderers.stg"

entry(name, key, value) ::= <<
private class <name>(
    val key: <key.propertyType>,
    val value: <value.propertyType>
) : KtMessage {
    override val messageSize
        get() = sizeof(key, value)

    override fun serialize(serializer: KtMessageSerializer) {
        <key.serialize>
        <value.serialize>
    }

    <entryCompanion()>
}

>>

entryCompanion() ::= <<
companion object Deserializer : KtDeserializer\<<name>\> {
    fun sizeof(key: <key.propertyType>, value: <value.propertyType>) =
        <key.sizeof> + <value.sizeof>

    override fun deserialize(deserializer: KtMessageDeserializer): <name> {
        var key<deserializeVar(key)>
        var value<deserializeVar(value)>

        while (true) {
            when (deserializer.readTag()) {
                0 -> return <name>(key, value <orDefault(value)>)
                <key.deserialize.tag> -> key = <key.deserialize.assignment>
                <value.deserialize.tag> -> value = <value.deserialize.assignment>
            }
        }
    }
}
>>

deserializeVar(p) ::= <%
    <if (isMessage.(p.messageType))>
        : <deserializeType(p)>
    <endif>
    <\ >= <deserializeValue(p)>
%>

orDefault(p) ::= <%
    <if (isMessage.(p.messageType))>
        ?: <value.propertyType> {}
    <endif>
%>
