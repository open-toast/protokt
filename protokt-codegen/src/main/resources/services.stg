/*
 * Copyright (c) 2020 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "renderers.stg"

service(name, qualifiedName, descriptor, methods) ::= <<
object <name>Grpc {
    const val SERVICE_NAME = "<qualifiedName>"

    val serviceDescriptor: io.grpc.ServiceDescriptor by lazy {
        <descriptor>
    }

    <methods : { m | val <m.lowerName>Method: io.grpc.MethodDescriptor\<<m.in>, <m.out>\> by lazy {
    <m.body><\n><\\>
    \}}; separator="\n\n">
}
>>

descriptor(methods) ::= <<
io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
    <methods : { m | .addMethod(<m>Method)}; separator="\n">
    .build()
>>

method(name, type, in, out, options) ::= <<
io.grpc.MethodDescriptor.newBuilder\<<in>, <out>\>()
    .setType(io.grpc.MethodDescriptor.MethodType.<type>)
    .setFullMethodName(io.grpc.MethodDescriptor.generateFullMethodName(SERVICE_NAME, "<name>"))
    .setRequestMarshaller(<requestMarshaller()>)
    .setResponseMarshaller(<responseMarshaller()>)
    .build()
>>

requestMarshaller() ::= <%
    <if (options.requestMarshaller)>
        <options.requestMarshaller>
    <else>
        <defaultMarshaller()>(<in>)
    <endif>
%>

responseMarshaller() ::= <%
    <if (options.responseMarshaller)>
        <options.responseMarshaller>
    <else>
        <defaultMarshaller()>(<out>)
    <endif>
%>

defaultMarshaller() ::= "com.toasttab.protokt.grpc.KtMarshaller"

methodType(method) ::= <%
    <if (method.clientStreaming)>
        <if (method.serverStreaming)>
            BIDI_STREAMING
        <else>
            CLIENT_STREAMING
        <endif>
    <else>
        <if (method.serverStreaming)>
            SERVER_STREAMING
        <else>
            UNARY
        <endif>
    <endif>
%>
