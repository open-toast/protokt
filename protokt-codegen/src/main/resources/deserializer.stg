/*
 * Copyright (c) 2020 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "dsl.stg"
import "renderers.stg"

deserializer() ::= <<
companion object Deserializer : KtDeserializer\<<message.name>\>, (<message.name>Dsl.() -> Unit) -> <message.name> {
    override fun deserialize(<\\>
    <if (options.longDeserializer)><\n><t()><t()><endif><\\>
    deserializer: KtMessageDeserializer<\\>
    <if (options.longDeserializer)><\n><t()><endif>): <message.name> {
        <properties:{p | var <deserializeVar(p)>}; separator="\n">
        var unknownFields: UnknownFieldSet.Builder? = null

        while (true) {
            when (deserializer.readTag()) {
                0 ->
                    return <message.name>(
                        <properties:{p | <deserializeWrapper(p)>}; separator=",\n"><\\>
                        <if (properties)>,<endif>
                        UnknownFieldSet.from(unknownFields)
                    )
                <deserialize:{d | <d.tag> -> <d.assignment.fieldName> =<\\>
                <if ((!d.std || d.repeated || d.assignment.long))><\n><t()><else><\ ><endif><\\>
                <d.assignment.value>}; separator="\n">
                else -> unknownFields =
                    (unknownFields ?: UnknownFieldSet.Builder()).also {
                        it.add(deserializer.readUnknown())
                    }
            }
        }
    }

    <dslInvoke()>
    <if (reflect)>

    val descriptor by lazy {
        <if (reflect.parentName)>
        <reflect.parentName>.descriptor.nestedTypes[<reflect.index>]
        <else>
        <reflect.fileDescriptorObjectName>.descriptor.messageTypes[<reflect.index>]
        <endif>
    }
    <endif>
}
>>
