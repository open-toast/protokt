/*
 * Copyright (c) 2019 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "options.stg"

kotlinDefaultValues ::= [
    "BOOL": "false",
    "BYTES": "Bytes.empty()",
    "DOUBLE": "0.0",
    "ENUM": ".from(0)",
    "MESSAGE": "null",
    "FIXED32": "0",
    "INT32": "0",
    "SFIXED32": "0",
    "SINT32": "0",
    "UINT32": "0",
    "FIXED64": "0L",
    "INT64": "0L",
    "SFIXED64": "0L",
    "SINT64": "0L",
    "UINT64": "0L",
    "FLOAT": "0.0F",
    "STRING": "\"\""
]

readFunctions ::= [
    "BOOL": "readBool",
    "BYTES": "readBytes",
    "DOUBLE": "readDouble",
    "ENUM": "readEnum",
    "FIXED32": "readFixed32",
    "FIXED64": "readFixed64",
    "FLOAT": "readFloat",
    "INT32": "readInt32",
    "INT64": "readInt64",
    "MESSAGE": "readMessage",
    "SFIXED32": "readSFixed32",
    "SFIXED64": "readSFixed64",
    "SINT32": "readSInt32",
    "SINT64": "readSInt64",
    "STRING": "readString",
    "UINT32": "readUInt32",
    "UINT64": "readUInt64",
    default : "throw new RuntimeException"
]

isMessage ::= ["MESSAGE": true, default: false]

isEnum ::= ["ENUM": true, default: false]

isBool ::= ["BOOL": true, default: false]

isGeneratedType ::= ["MESSAGE": true, "ENUM": true, default: false]

isBytes ::= ["BYTES": true, default: false]

isString ::= ["STRING": true, default: false]

read(type, builder) ::= "<readFunctions.(type)>(<builder>)"

box(type, def) ::= "<if (type.boxed)><type.boxer>(<def>)<else><def><endif>"

boxMap(type, box, options) ::= <%
    <if (isMessage.(type))>
        <box>(
        <if (options.keyWrap)>
            <accessField(options.keyWrap, keyAccess())>
        <else>
            <keyAccess()>
        <endif>
        ,<\ >
        <if (options.valueWrap)>
            <maybeConstructBytes(accessField(options.valueWrap, valueAccess()))>
        <else>
            <valueAccess()>
        <endif>
        )
    <else>
    <endif>
%>

keyAccess() ::= "it.key"

valueAccess() ::= "it.value"

maybeConstructBytes(arg) ::= <%
    <if (isBytes.(options.valueType))>
        Bytes(<arg>)
    <else>
        <arg>
    <endif>
%>

deserializeType(p) ::= <%
    <if (p.repeated || p.map)>
        Mutable
    <endif>
    <p.deserializeType>
%>

deserializeValue(p) ::= <%
    <if (p.repeated || isMessage.(p.fieldType) || p.wrapped || p.nullable)>
        null
    <else>
        <p.defaultValue>
    <endif>
%>

requireNotNull(p) ::= <<
requireNotNull(<p.name>) {
    StringBuilder("<p.name>")
        .append(" specified nonnull with (protokt.<if (p.oneof)>oneof<else>property<endif>).non_null but was null")
}
>>

deserializeWrapper(p) ::= <%
    <if (p.nonNullOption)>
        <requireNotNull(p)>
    <else>
        <if (p.map)>
            finishMap(<p.name>)
        <elseif (p.repeated)>
            finishList(<p.name>)
        <else>
            <p.name>
            <if (p.wrapped && !p.nullable)>
                <\ >?: <p.defaultValue>
            <endif>
        <endif>
    <endif>
%>

deserializeVar(p) ::= <%
    <p.name>
    <if (isMessage.(p.fieldType) || p.repeated || p.oneof || p.nullable || p.wrapped)>
    : <deserializeType(p)>
    <endif>
    <\ >= <deserializeValue(p)>
%>

concatWithScope(scope, value) ::= "<scope>.<value>"

defaultValue(field, type, name) ::= <%
    <if (field.map)>
        emptyMap()
    <elseif (field.repeated)>
        emptyList()
    <elseif (isGeneratedType.(type))>
        <name><kotlinDefaultValues.(type)>
    <elseif (field.nullable)>
        null
    <else>
        <kotlinDefaultValues.(type)>
    <endif>
%>

nonDefaultValue(field, name) ::= <%
    <if ((isMessage.(field.type) && !field.repeated) || field.optional)>
        (<field.fieldName> != null)<\ >
    <elseif (field.repeated)>
        (<field.fieldName>.isNotEmpty())<\ >
    <elseif (isBytes.(field.type) || isString.(field.type))>
        (<proto2Check()><name>.isNotEmpty())<\ >
    <elseif (isMessage.(field.type))>
        (<field.fieldName> != null)<\ >
    <elseif (isEnum.(field.type))>
        (<name>.value != 0)<\ >
    <elseif (field.type.scalar)>
        <if (isBool.(field.type))>
            (<name>)<\ >
        <else>
            (<name> != <kotlinDefaultValues.(field.type)>)<\ >
        <endif>
    <endif>
%>

iterationVar() ::= "it"

serialize(field, name, tag, box, options) ::= <<
<if (field.repeated && field.packed)>
serializer
        .write(Tag(<tag>))
        .write(UInt32(<name>.sumBy { sizeof(<box(field.type, iterationVar())>) }))
    <name>.forEach {
        serializer.write(<box(field.type, options.fieldAccess)>)
    }<\\>
<elseif (field.map)>
<name>.entries.forEach {
        serializer
            .write(Tag(<tag>))
            .write(<box>)
    }<\\>
<elseif (field.repeated)>
<name>.forEach {
        serializer.write(Tag(<tag>)).write(<box(field.type, options.fieldAccess)>)
    }<\\>
<else>
serializer.write(Tag(<tag>)).write(<box>)<\\>
<endif>
>>

deserialize(field, read, lhs, options, packed) ::= <%
    <if (field.map)>
        <deserializeMap()>
    <elseif (field.repeated)>
        (<lhs> ?: mutableListOf()).apply {<\n>
            <t()><t()>deserializer.readRepeated(<packed>) {<\n>
                <t()><t()><t()>add(<wrapDeserializeRead(options, deserializerRead(read))>)<\n>
            <t()><t()>}<\n>
        <t()>}
    <else>
        <wrapDeserializeRead(options, deserializerRead(read))>
    <endif>
%>

deserializeMap() ::= <%
    (<lhs> ?: mutableMapOf()).apply {<\n>
        <t()><t()>deserializer.readRepeated(false) {<\n>
            <t()><t()><t()><read><\n>
                <t()><t()><t()><t()>.let { put(
                    <if (options.keyWrap)>
                        <wrapField(options.keyWrap, keyAccess())>
                    <else>
                        <keyAccess()>
                    <endif>
                    ,<\ >
                    <if (options.valueWrap)>
                        <wrapField(options.valueWrap, valueAccess(), options.valueType, true)>
                    <else>
                        <valueAccess()>
                    <endif>
                    ) }<\n>
        <t()><t()>}<\n>
    <t()>}
%>

deserializerRead(read) ::= "deserializer.<read>"

standard(field, any) ::= <%
    <if (field.map)>
        Map\<<any.kType>, <any.vType>>
    <elseif (field.repeated)>
        List\<<any>>
    <else>
        <any>
    <endif>
%>

sizeof(name, field, type, options) ::= <%
    <if(field.map)>
        <sizeofMap()>
    <elseif(field.repeated && field.packed)>
        sizeof(Tag(<field.number>)) +<\n>
            <t()><t()><name><\n>
                <t()><t()><t()>.sumBy { sizeof(<box(field.type, iterationVar())>) }<\n>
                <t()><t()><t()>.let { it + sizeof(UInt32(it)) }
    <elseif(field.repeated && !field.map)>
        (sizeof(Tag(<field.number>)) * <name>.size) +<\n>
            <t()><t()><name>.sumBy { sizeof(<box(field.type, options.fieldAccess)>) }
    <else>
        sizeof(Tag(<field.number>)) + <options.fieldSizeof>
    <endif>
%>

sizeofMap() ::= <%
    sizeofMap(<name>, Tag(<field.number>)) { k, v -><\n>
        <t()><t()><type>.sizeof(
        <if (options.keyAccess)>
            <accessField(options.keyAccess, sizeofMapKey())>
        <else>
            <sizeofMapKey()>
        <endif>
        ,<\ >
        <if (options.valueAccess)>
            <maybeConstructBytes(accessField(options.valueAccess, sizeofMapValue()))>
        <else>
            <sizeofMapValue()>
        <endif>
        )<\n>
    <t()>}
%>

sizeofMapKey() ::= "k"

sizeofMapValue() ::= "v"

fieldSizeof(field, name) ::= <%
    sizeof(<box(field.type, name)>)
%>

blockComment(contents) ::= <<
<if (contents)><\\>
/**
 *<contents:{ln |<ln>};separator="\n *">
 */
<endif>
>>

t() ::= "    "
