/*
 * Copyright (c) 2020 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "options.stg"
import "renderers.stg"

enum(name, map, options) ::= <<
<blockComment(options.documentation)><\\>
<suppressDeprecation(options)><\\>
<deprecated(options)><\\>
sealed class <name>(
    override val value: Int,
    override val name: String
) : KtEnum() {
    <map.keys:{k |<\\>
    <blockComment(map.(k).documentation)><\\>
    <deprecated(map.(k))><\\>
    object <map.(k).valueName> : <name>(<k>, "<map.(k).valueName>")<\\>
    }; separator="\n\n">

    class UNRECOGNIZED(value: Int) : <name>(value, "UNRECOGNIZED")

    companion object Deserializer : KtEnumDeserializer\<<name>\> {
        override fun from(value: Int) =
            when (value) {
                <map.keys:{k | <k> -> <map.(k).valueName>}; separator="\n">
                else -> UNRECOGNIZED(value)
            }
    }
}

>>
