/*
 * Copyright (c) 2021 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "options.stg"

descriptor(fileDescriptorObjectName, parts, dependencies, longDependencies, descriptorExtensionProperties) ::= <<
object <fileDescriptorObjectName> {
    val descriptor by lazy {
        val descriptorData = arrayOf(
            <parts:{lines | <lines:{l | "<l>"}; separator=" +\n">}; separator=",\n">
        )

        FileDescriptor.buildFrom(
            descriptorData,
            <if (longDependencies)>
            listOf(
                <dependencies:{d | <d>.descriptor}; separator=",\n">
            )
            <else>
            listOf(<dependencies:{d | <d>.descriptor}; separator=", ">)
            <endif>
        )
    }
}

<descriptorExtensionProperties: {p | <p>}; separator="\n">
>>

messageDescriptorProperty(topLevel, typeName, qualification, fileDescriptorObjectName, index, suppressDeprecation) ::= <<
<suppressDeprecation(suppressDeprecation)><\\>
val <qualification><typeName>.Deserializer.descriptor
    get() = <\\>
        <if (topLevel)><\\>
        <fileDescriptorObjectName>.descriptor.messageTypes[<index>]
        <else><\\>
        <qualification>descriptor.nestedTypes[<index>]
        <endif>
>>

enumDescriptorProperty(topLevel, typeName, qualification, fileDescriptorObjectName, index, suppressDeprecation) ::= <<
<suppressDeprecation(suppressDeprecation)><\\>
val <qualification><typeName>.Deserializer.descriptor
    get() = <\\>
        <if (topLevel)><\\>
        <fileDescriptorObjectName>.descriptor.enumTypes[<index>]
        <else><\\>
        <qualification>descriptor.enumTypes[<index>]
        <endif>
>>
