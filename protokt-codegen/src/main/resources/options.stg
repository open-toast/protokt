/*
 * Copyright (c) 2019 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

wrapDeserializeRead(options, read) ::= <%
    <if (options)>
        <wrapField(options.wrapName, read, options.type, options.oneof)>
    <else>
        <read>
    <endif>
%>

wrapField(wrapName, arg, type, oneof) ::= <%
    <wrapName>.wrap(<arg><deref.(type)>
    <if (!oneof && nullDeserializeVar.(type))>
        !!
    <endif>
    )
%>

protoTypesToJavaClassNames ::= [
    "BOOL": "Boolean",
    "DOUBLE": "Double",
    "FIXED32": "Integer",
    "FIXED64": "Long",
    "FLOAT": "Float",
    "INT32": "Integer",
    "INT64": "Long",
    "SFIXED32": "Integer",
    "SFIXED64": "Long",
    "SINT32": "Integer",
    "SINT64": "Long",
    "STRING": "String",
    "UINT32": "Integer",
    "UINT64": "Long"
]

typeToJavaClassName(type) ::= <%
    <if (protoTypesToJavaClassNames.(type))>
        java.lang.<protoTypesToJavaClassNames.(type)>
    <else>
        [B
    <endif>
%>

nullDeserializeVar ::= [
    "MESSAGE": true,
    default: false
]

accessField(wrapName, arg) ::= <%
    <wrapName>.unwrap(<arg>)
%>

deref ::= [
    "BYTES": ".bytes",
    default: ""
]

sizeof(arg) ::= "sizeof(<arg>)"

bytesSlice() ::= "BytesSlice"

readBytesSlice() ::= "readBytesSlice()"

defaultBytesSlice() ::= "BytesSlice.empty"

messageImplements() ::= <%
    <if (message.doesImplement)><\\>
        , <message.implements>
    <endif>
%>

messagePropertyOverrides() ::= <%
    <if (p.overrides)>override <endif>
%>

oneofDoesImplement() ::= <%
    <if (options.doesImplement)>
        : <options.implements><\ >
    <endif>
%>

oneofImplements() ::= <%
    <if (options.doesImplement)>
        , <options.implements> by <types.(k).fieldName><\ >
    <endif>
%>

deprecated(any) ::= <%
    <if (any.deprecation)>
        @Deprecated(
            <if (any.deprecation.message)>
                "<any.deprecation.message>"
            <else>
                "deprecated in proto"
            <endif>
        )<\n>
    <endif>
%>

suppressDeprecation(any) ::= <%
    <if (any.suppressDeprecation)>
        @Suppress("DEPRECATION")<\n>
    <endif>
%>

javaClassNameForWellKnownType(type) ::= <%
    <wellKnownTypesToJavaClassNames.(type)>
%>

wellKnownTypesToJavaClassNames ::= [
    "DoubleValue": "java.lang.Double",
    "FloatValue": "java.lang.Float",
    "Int64Value": "java.lang.Long",
    "UInt64Value": "java.lang.Long",
    "Int32Value": "java.lang.Integer",
    "UInt32Value": "java.lang.Integer",
    "BoolValue": "java.lang.Boolean",
    "StringValue": "java.lang.String",
    "BytesValue": "com.toasttab.protokt.rt.Bytes"
]
