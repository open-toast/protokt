/*
 * Copyright (c) 2023 Toast, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/protobuf/source_context.proto
package com.toasttab.protokt

import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * `SourceContext` represents information about the source of a protobuf element, like the file in
 * which it is defined.
 */
@KtGeneratedMessage("google.protobuf.SourceContext")
class SourceContext private constructor(
    /**
     * The path-qualified name of the .proto file that contained the associated protobuf element.
     * For example: `"google/protobuf/source_context.proto"`.
     */
    val fileName: String,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (fileName.isNotEmpty()) {
            result += sizeof(Tag(1)) + sizeof(fileName)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (fileName.isNotEmpty()) {
            serializer.write(Tag(10)).write(fileName)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is SourceContext &&
            other.fileName == fileName &&
            other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + fileName.hashCode()
        return result
    }

    override fun toString(): String = "SourceContext(" +
            "fileName=$fileName" +
            "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: SourceContextDsl.() -> Unit): SourceContext = SourceContext.Deserializer {
        fileName = this@SourceContext.fileName
        unknownFields = this@SourceContext.unknownFields
        dsl()
    }

    class SourceContextDsl {
        var fileName: String = ""

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): SourceContext = SourceContext(fileName,
            unknownFields)
    }

    companion object Deserializer : KtDeserializer<SourceContext>,
            (SourceContextDsl.() -> Unit) -> SourceContext {
        override fun deserialize(deserializer: KtMessageDeserializer): SourceContext {
            var fileName = ""
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return SourceContext(fileName,
                        UnknownFieldSet.from(unknownFields))
                    10 -> fileName = deserializer.readString()
                    else -> unknownFields = (unknownFields ?:
                    UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: SourceContextDsl.() -> Unit): SourceContext =
            SourceContextDsl().apply(dsl).build()
    }
}
