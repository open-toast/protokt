@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/logging/type/http_request.proto
package com.google.logging.type

import com.toasttab.protokt.Duration
import com.toasttab.protokt.rt.Int32
import com.toasttab.protokt.rt.Int64
import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit

/**
 * A common proto for logging HTTP requests. Only contains semantics defined by the HTTP
 * specification. Product-specific logging information MUST be defined in a separate message.
 */
@KtGeneratedMessage("google.logging.type.HttpRequest")
class HttpRequest private constructor(
    /**
     * The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
     */
    val requestMethod: String,
    /**
     * The scheme (http, https), the host name, the path and the query portion of the URL that was
     * requested. Example: `"http://example.com/some/info?color=red"`.
     */
    val requestUrl: String,
    /**
     * The size of the HTTP request message in bytes, including the request headers and the request
     * body.
     */
    val requestSize: Long,
    /**
     * The response code indicating the status of response. Examples: 200, 404.
     */
    val status: Int,
    /**
     * The size of the HTTP response message sent back to the client, in bytes, including the
     * response headers and the response body.
     */
    val responseSize: Long,
    /**
     * The user agent sent by the client. Example: `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98;
     * Q312461; .NET CLR 1.0.3705)"`.
     */
    val userAgent: String,
    /**
     * The IP address (IPv4 or IPv6) of the client that issued the HTTP request. This field can
     * include port information. Examples: `"192.168.1.1"`, `"10.0.0.1:80"`,
     * `"FE80::0202:B3FF:FE1E:8329"`.
     */
    val remoteIp: String,
    /**
     * The referer URL of the request, as defined in [HTTP/1.1 Header Field
     * Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
     */
    val referer: String,
    /**
     * Whether or not an entity was served from cache (with or without validation).
     */
    val cacheHit: Boolean,
    /**
     * Whether or not the response was validated with the origin server before being served from
     * cache. This field is only meaningful if `cache_hit` is True.
     */
    val cacheValidatedWithOriginServer: Boolean,
    /**
     * Whether or not a cache lookup was attempted.
     */
    val cacheLookup: Boolean,
    /**
     * The number of HTTP response bytes inserted into cache. Set only when a cache fill was
     * attempted.
     */
    val cacheFillBytes: Long,
    /**
     * The IP address (IPv4 or IPv6) of the origin server that the request was sent to. This field
     * can include port information. Examples: `"192.168.1.1"`, `"10.0.0.1:80"`,
     * `"FE80::0202:B3FF:FE1E:8329"`.
     */
    val serverIp: String,
    /**
     * The request processing latency on the server, from the time the request was received until
     * the response was sent.
     */
    val latency: Duration?,
    /**
     * Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
     */
    val protocol: String,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (requestMethod.isNotEmpty()) {
            result += sizeof(Tag(1)) + sizeof(requestMethod)
        }
        if (requestUrl.isNotEmpty()) {
            result += sizeof(Tag(2)) + sizeof(requestUrl)
        }
        if (requestSize != 0L) {
            result += sizeof(Tag(3)) + sizeof(Int64(requestSize))
        }
        if (status != 0) {
            result += sizeof(Tag(4)) + sizeof(Int32(status))
        }
        if (responseSize != 0L) {
            result += sizeof(Tag(5)) + sizeof(Int64(responseSize))
        }
        if (userAgent.isNotEmpty()) {
            result += sizeof(Tag(6)) + sizeof(userAgent)
        }
        if (remoteIp.isNotEmpty()) {
            result += sizeof(Tag(7)) + sizeof(remoteIp)
        }
        if (referer.isNotEmpty()) {
            result += sizeof(Tag(8)) + sizeof(referer)
        }
        if (cacheHit) {
            result += sizeof(Tag(9)) + sizeof(cacheHit)
        }
        if (cacheValidatedWithOriginServer) {
            result += sizeof(Tag(10)) + sizeof(cacheValidatedWithOriginServer)
        }
        if (cacheLookup) {
            result += sizeof(Tag(11)) + sizeof(cacheLookup)
        }
        if (cacheFillBytes != 0L) {
            result += sizeof(Tag(12)) + sizeof(Int64(cacheFillBytes))
        }
        if (serverIp.isNotEmpty()) {
            result += sizeof(Tag(13)) + sizeof(serverIp)
        }
        if (latency  != null) {
            result += sizeof(Tag(14)) + sizeof(latency)
        }
        if (protocol.isNotEmpty()) {
            result += sizeof(Tag(15)) + sizeof(protocol)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (requestMethod.isNotEmpty()) {
            serializer.write(Tag(10)).write(requestMethod)
        }
        if (requestUrl.isNotEmpty()) {
            serializer.write(Tag(18)).write(requestUrl)
        }
        if (requestSize != 0L) {
            serializer.write(Tag(24)).write(Int64(requestSize))
        }
        if (status != 0) {
            serializer.write(Tag(32)).write(Int32(status))
        }
        if (responseSize != 0L) {
            serializer.write(Tag(40)).write(Int64(responseSize))
        }
        if (userAgent.isNotEmpty()) {
            serializer.write(Tag(50)).write(userAgent)
        }
        if (remoteIp.isNotEmpty()) {
            serializer.write(Tag(58)).write(remoteIp)
        }
        if (referer.isNotEmpty()) {
            serializer.write(Tag(66)).write(referer)
        }
        if (cacheHit) {
            serializer.write(Tag(72)).write(cacheHit)
        }
        if (cacheValidatedWithOriginServer) {
            serializer.write(Tag(80)).write(cacheValidatedWithOriginServer)
        }
        if (cacheLookup) {
            serializer.write(Tag(88)).write(cacheLookup)
        }
        if (cacheFillBytes != 0L) {
            serializer.write(Tag(96)).write(Int64(cacheFillBytes))
        }
        if (serverIp.isNotEmpty()) {
            serializer.write(Tag(106)).write(serverIp)
        }
        if (latency  != null) {
            serializer.write(Tag(114)).write(latency)
        }
        if (protocol.isNotEmpty()) {
            serializer.write(Tag(122)).write(protocol)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is HttpRequest &&
        other.requestMethod == requestMethod &&
        other.requestUrl == requestUrl &&
        other.requestSize == requestSize &&
        other.status == status &&
        other.responseSize == responseSize &&
        other.userAgent == userAgent &&
        other.remoteIp == remoteIp &&
        other.referer == referer &&
        other.cacheHit == cacheHit &&
        other.cacheValidatedWithOriginServer == cacheValidatedWithOriginServer &&
        other.cacheLookup == cacheLookup &&
        other.cacheFillBytes == cacheFillBytes &&
        other.serverIp == serverIp &&
        other.latency == latency &&
        other.protocol == protocol &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + requestMethod.hashCode()
        result = 31 * result + requestUrl.hashCode()
        result = 31 * result + requestSize.hashCode()
        result = 31 * result + status.hashCode()
        result = 31 * result + responseSize.hashCode()
        result = 31 * result + userAgent.hashCode()
        result = 31 * result + remoteIp.hashCode()
        result = 31 * result + referer.hashCode()
        result = 31 * result + cacheHit.hashCode()
        result = 31 * result + cacheValidatedWithOriginServer.hashCode()
        result = 31 * result + cacheLookup.hashCode()
        result = 31 * result + cacheFillBytes.hashCode()
        result = 31 * result + serverIp.hashCode()
        result = 31 * result + latency.hashCode()
        result = 31 * result + protocol.hashCode()
        return result
    }

    override fun toString(): String = "HttpRequest(" +
        "requestMethod=$requestMethod, " +
        "requestUrl=$requestUrl, " +
        "requestSize=$requestSize, " +
        "status=$status, " +
        "responseSize=$responseSize, " +
        "userAgent=$userAgent, " +
        "remoteIp=$remoteIp, " +
        "referer=$referer, " +
        "cacheHit=$cacheHit, " +
        "cacheValidatedWithOriginServer=$cacheValidatedWithOriginServer, " +
        "cacheLookup=$cacheLookup, " +
        "cacheFillBytes=$cacheFillBytes, " +
        "serverIp=$serverIp, " +
        "latency=$latency, " +
        "protocol=$protocol" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: HttpRequestDsl.() -> Unit): HttpRequest = HttpRequest.Deserializer {
        requestMethod = this@HttpRequest.requestMethod
        requestUrl = this@HttpRequest.requestUrl
        requestSize = this@HttpRequest.requestSize
        status = this@HttpRequest.status
        responseSize = this@HttpRequest.responseSize
        userAgent = this@HttpRequest.userAgent
        remoteIp = this@HttpRequest.remoteIp
        referer = this@HttpRequest.referer
        cacheHit = this@HttpRequest.cacheHit
        cacheValidatedWithOriginServer = this@HttpRequest.cacheValidatedWithOriginServer
        cacheLookup = this@HttpRequest.cacheLookup
        cacheFillBytes = this@HttpRequest.cacheFillBytes
        serverIp = this@HttpRequest.serverIp
        latency = this@HttpRequest.latency
        protocol = this@HttpRequest.protocol
        unknownFields = this@HttpRequest.unknownFields
        dsl()
    }

    class HttpRequestDsl {
        var requestMethod: String = ""

        var requestUrl: String = ""

        var requestSize: Long = 0L

        var status: Int = 0

        var responseSize: Long = 0L

        var userAgent: String = ""

        var remoteIp: String = ""

        var referer: String = ""

        var cacheHit: Boolean = false

        var cacheValidatedWithOriginServer: Boolean = false

        var cacheLookup: Boolean = false

        var cacheFillBytes: Long = 0L

        var serverIp: String = ""

        var latency: Duration? = null

        var protocol: String = ""

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): HttpRequest = HttpRequest(requestMethod,
        requestUrl,
        requestSize,
        status,
        responseSize,
        userAgent,
        remoteIp,
        referer,
        cacheHit,
        cacheValidatedWithOriginServer,
        cacheLookup,
        cacheFillBytes,
        serverIp,
        latency,
        protocol,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<HttpRequest>,
            (HttpRequestDsl.() -> Unit) -> HttpRequest {
        override fun deserialize(deserializer: KtMessageDeserializer): HttpRequest {
            var requestMethod = ""
            var requestUrl = ""
            var requestSize = 0L
            var status = 0
            var responseSize = 0L
            var userAgent = ""
            var remoteIp = ""
            var referer = ""
            var cacheHit = false
            var cacheValidatedWithOriginServer = false
            var cacheLookup = false
            var cacheFillBytes = 0L
            var serverIp = ""
            var latency : Duration? = null
            var protocol = ""
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return HttpRequest(requestMethod,
                            requestUrl,
                            requestSize,
                            status,
                            responseSize,
                            userAgent,
                            remoteIp,
                            referer,
                            cacheHit,
                            cacheValidatedWithOriginServer,
                            cacheLookup,
                            cacheFillBytes,
                            serverIp,
                            latency,
                            protocol,
                            UnknownFieldSet.from(unknownFields))
                    10 -> requestMethod = deserializer.readString()
                    18 -> requestUrl = deserializer.readString()
                    24 -> requestSize = deserializer.readInt64()
                    32 -> status = deserializer.readInt32()
                    40 -> responseSize = deserializer.readInt64()
                    50 -> userAgent = deserializer.readString()
                    58 -> remoteIp = deserializer.readString()
                    66 -> referer = deserializer.readString()
                    72 -> cacheHit = deserializer.readBool()
                    80 -> cacheValidatedWithOriginServer = deserializer.readBool()
                    88 -> cacheLookup = deserializer.readBool()
                    96 -> cacheFillBytes = deserializer.readInt64()
                    106 -> serverIp = deserializer.readString()
                    114 -> latency = deserializer.readMessage(com.toasttab.protokt.Duration)
                    122 -> protocol = deserializer.readString()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: HttpRequestDsl.() -> Unit): HttpRequest =
                HttpRequestDsl().apply(dsl).build()
    }
}
