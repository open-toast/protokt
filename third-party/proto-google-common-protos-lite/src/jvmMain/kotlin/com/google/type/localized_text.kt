@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/localized_text.proto
package com.google.type

import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * Localized variant of a text in a particular language.
 */
@KtGeneratedMessage("google.type.LocalizedText")
class LocalizedText private constructor(
    /**
     * Localized string in the language corresponding to `language_code' below.
     */
    val text: String,
    /**
     * The text's BCP-47 language code, such as "en-US" or "sr-Latn".
     *
     *  For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
     */
    val languageCode: String,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (text.isNotEmpty()) {
            result += sizeof(Tag(1)) + sizeof(text)
        }
        if (languageCode.isNotEmpty()) {
            result += sizeof(Tag(2)) + sizeof(languageCode)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (text.isNotEmpty()) {
            serializer.write(Tag(10)).write(text)
        }
        if (languageCode.isNotEmpty()) {
            serializer.write(Tag(18)).write(languageCode)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is LocalizedText &&
        other.text == text &&
        other.languageCode == languageCode &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + text.hashCode()
        result = 31 * result + languageCode.hashCode()
        return result
    }

    override fun toString(): String = "LocalizedText(" +
        "text=$text, " +
        "languageCode=$languageCode" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: LocalizedTextDsl.() -> Unit): LocalizedText = LocalizedText.Deserializer {
        text = this@LocalizedText.text
        languageCode = this@LocalizedText.languageCode
        unknownFields = this@LocalizedText.unknownFields
        dsl()
    }

    class LocalizedTextDsl {
        var text: String = ""

        var languageCode: String = ""

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): LocalizedText = LocalizedText(text,
        languageCode,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<LocalizedText>,
            (LocalizedTextDsl.() -> Unit) -> LocalizedText {
        override fun deserialize(deserializer: KtMessageDeserializer): LocalizedText {
            var text = ""
            var languageCode = ""
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return LocalizedText(text,
                            languageCode,
                            UnknownFieldSet.from(unknownFields))
                    10 -> text = deserializer.readString()
                    18 -> languageCode = deserializer.readString()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: LocalizedTextDsl.() -> Unit): LocalizedText =
                LocalizedTextDsl().apply(dsl).build()
    }
}
