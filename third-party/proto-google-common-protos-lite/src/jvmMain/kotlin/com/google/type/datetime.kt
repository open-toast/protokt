@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/datetime.proto
package com.google.type

import com.toasttab.protokt.Duration
import com.toasttab.protokt.rt.Int32
import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * Represents civil time (or occasionally physical time).
 *
 *  This type can represent a civil time in one of a few possible ways:
 *
 *   * When utc_offset is set and time_zone is unset: a civil time on a calendar    day with a
 * particular offset from UTC.  * When time_zone is set and utc_offset is unset: a civil time on a
 * calendar    day in a particular time zone.  * When neither time_zone nor utc_offset is set: a civil
 * time on a calendar    day in local time.
 *
 *  The date is relative to the Proleptic Gregorian Calendar.
 *
 *  If year is 0, the DateTime is considered not to have a specific year. month and day must have
 * valid, non-zero values.
 *
 *  This type may also be used to represent a physical time if all the date and time fields are set
 * and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical
 * time instead. If your use case also would like to store the user's timezone, that can be done in
 * another field.
 *
 *  This type is more flexible than some applications may want. Make sure to document and validate
 * your application's limitations.
 */
@Deprecated("use v1")
@KtGeneratedMessage("google.type.DateTime")
class DateTime private constructor(
    /**
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
     */
    val year: Int,
    /**
     * Required. Month of year. Must be from 1 to 12.
     */
    val month: Int,
    /**
     * Required. Day of month. Must be from 1 to 31 and valid for the year and month.
     */
    val day: Int,
    /**
     * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow
     * the value "24:00:00" for scenarios like business closing time.
     */
    val hours: Int,
    /**
     * Required. Minutes of hour of day. Must be from 0 to 59.
     */
    val minutes: Int,
    /**
     * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the
     * value 60 if it allows leap-seconds.
     */
    val seconds: Int,
    /**
     * Required. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
     */
    val nanos: Int,
    /**
     * Optional. Specifies either the UTC offset or the time zone of the DateTime. Choose carefully
     * between them, considering that time zone data may change in the future (for example, a country
     * modifies their DST start/end dates, and future DateTimes in the affected range had already been
     * stored). If omitted, the DateTime is considered to be in local time.
     */
    val timeOffset: TimeOffset?,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (year != 0) {
            result += sizeof(Tag(1)) + sizeof(Int32(year))
        }
        if (month != 0) {
            result += sizeof(Tag(2)) + sizeof(Int32(month))
        }
        if (day != 0) {
            result += sizeof(Tag(3)) + sizeof(Int32(day))
        }
        if (hours != 0) {
            result += sizeof(Tag(4)) + sizeof(Int32(hours))
        }
        if (minutes != 0) {
            result += sizeof(Tag(5)) + sizeof(Int32(minutes))
        }
        if (seconds != 0) {
            result += sizeof(Tag(6)) + sizeof(Int32(seconds))
        }
        if (nanos != 0) {
            result += sizeof(Tag(7)) + sizeof(Int32(nanos))
        }
        when (timeOffset) {
            is DateTime.TimeOffset.UtcOffset -> {
                result += sizeof(Tag(8)) + sizeof(timeOffset.utcOffset)}
            is DateTime.TimeOffset.TimeZone -> {
                result += sizeof(Tag(9)) + sizeof(timeOffset.timeZone)}
            null -> Unit
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (year != 0) {
            serializer.write(Tag(8)).write(Int32(year))
        }
        if (month != 0) {
            serializer.write(Tag(16)).write(Int32(month))
        }
        if (day != 0) {
            serializer.write(Tag(24)).write(Int32(day))
        }
        if (hours != 0) {
            serializer.write(Tag(32)).write(Int32(hours))
        }
        if (minutes != 0) {
            serializer.write(Tag(40)).write(Int32(minutes))
        }
        if (seconds != 0) {
            serializer.write(Tag(48)).write(Int32(seconds))
        }
        if (nanos != 0) {
            serializer.write(Tag(56)).write(Int32(nanos))
        }
        when (timeOffset) {
            is DateTime.TimeOffset.UtcOffset -> {
                serializer.write(Tag(66)).write(timeOffset.utcOffset)
            }
            is DateTime.TimeOffset.TimeZone -> {
                serializer.write(Tag(74)).write(timeOffset.timeZone)
            }
            null -> Unit
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is DateTime &&
        other.year == year &&
        other.month == month &&
        other.day == day &&
        other.hours == hours &&
        other.minutes == minutes &&
        other.seconds == seconds &&
        other.nanos == nanos &&
        other.timeOffset == timeOffset &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + year.hashCode()
        result = 31 * result + month.hashCode()
        result = 31 * result + day.hashCode()
        result = 31 * result + hours.hashCode()
        result = 31 * result + minutes.hashCode()
        result = 31 * result + seconds.hashCode()
        result = 31 * result + nanos.hashCode()
        result = 31 * result + timeOffset.hashCode()
        return result
    }

    override fun toString(): String = "DateTime(" +
        "year=$year, " +
        "month=$month, " +
        "day=$day, " +
        "hours=$hours, " +
        "minutes=$minutes, " +
        "seconds=$seconds, " +
        "nanos=$nanos, " +
        "timeOffset=$timeOffset" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: DateTimeDsl.() -> Unit): DateTime = DateTime.Deserializer {
        year = this@DateTime.year
        month = this@DateTime.month
        day = this@DateTime.day
        hours = this@DateTime.hours
        minutes = this@DateTime.minutes
        seconds = this@DateTime.seconds
        nanos = this@DateTime.nanos
        timeOffset = this@DateTime.timeOffset
        unknownFields = this@DateTime.unknownFields
        dsl()
    }

    sealed class TimeOffset {
        /**
         * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC
         * offset of -4:00 would be represented as { seconds: -14400 }.
         */
        data class UtcOffset(
            val utcOffset: Duration,
        ) : TimeOffset()

        /**
         * Time zone.
         */
        data class TimeZone(
            val timeZone: com.google.type.TimeZone,
        ) : TimeOffset()
    }

    class DateTimeDsl {
        var year: Int = 0

        var month: Int = 0

        var day: Int = 0

        var hours: Int = 0

        var minutes: Int = 0

        var seconds: Int = 0

        var nanos: Int = 0

        var timeOffset: TimeOffset? = null

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): DateTime = DateTime(year,
        month,
        day,
        hours,
        minutes,
        seconds,
        nanos,
        timeOffset,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<DateTime>,
            (DateTimeDsl.() -> Unit) -> DateTime {
        override fun deserialize(deserializer: KtMessageDeserializer): DateTime {
            var year = 0
            var month = 0
            var day = 0
            var hours = 0
            var minutes = 0
            var seconds = 0
            var nanos = 0
            var timeOffset : TimeOffset? = null
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return DateTime(year,
                            month,
                            day,
                            hours,
                            minutes,
                            seconds,
                            nanos,
                            timeOffset,
                            UnknownFieldSet.from(unknownFields))
                    8 -> year = deserializer.readInt32()
                    16 -> month = deserializer.readInt32()
                    24 -> day = deserializer.readInt32()
                    32 -> hours = deserializer.readInt32()
                    40 -> minutes = deserializer.readInt32()
                    48 -> seconds = deserializer.readInt32()
                    56 -> nanos = deserializer.readInt32()
                    66 -> timeOffset =
                            TimeOffset.UtcOffset(deserializer.readMessage(com.toasttab.protokt.Duration))
                    74 -> timeOffset =
                            TimeOffset.TimeZone(deserializer.readMessage(com.google.type.TimeZone))
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: DateTimeDsl.() -> Unit): DateTime =
                DateTimeDsl().apply(dsl).build()
    }
}

/**
 * Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
 */
@Deprecated("use v1")
@KtGeneratedMessage("google.type.TimeZone")
class TimeZone private constructor(
    /**
     * IANA Time Zone Database time zone, e.g. "America/New_York".
     */
    val id: String,
    /**
     * Optional. IANA Time Zone Database version number, e.g. "2019a".
     */
    val version: String,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (id.isNotEmpty()) {
            result += sizeof(Tag(1)) + sizeof(id)
        }
        if (version.isNotEmpty()) {
            result += sizeof(Tag(2)) + sizeof(version)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (id.isNotEmpty()) {
            serializer.write(Tag(10)).write(id)
        }
        if (version.isNotEmpty()) {
            serializer.write(Tag(18)).write(version)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is TimeZone &&
        other.id == id &&
        other.version == version &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + id.hashCode()
        result = 31 * result + version.hashCode()
        return result
    }

    override fun toString(): String = "TimeZone(" +
        "id=$id, " +
        "version=$version" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: TimeZoneDsl.() -> Unit): TimeZone = TimeZone.Deserializer {
        id = this@TimeZone.id
        version = this@TimeZone.version
        unknownFields = this@TimeZone.unknownFields
        dsl()
    }

    class TimeZoneDsl {
        var id: String = ""

        var version: String = ""

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): TimeZone = TimeZone(id,
        version,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<TimeZone>,
            (TimeZoneDsl.() -> Unit) -> TimeZone {
        override fun deserialize(deserializer: KtMessageDeserializer): TimeZone {
            var id = ""
            var version = ""
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return TimeZone(id,
                            version,
                            UnknownFieldSet.from(unknownFields))
                    10 -> id = deserializer.readString()
                    18 -> version = deserializer.readString()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: TimeZoneDsl.() -> Unit): TimeZone =
                TimeZoneDsl().apply(dsl).build()
    }
}
