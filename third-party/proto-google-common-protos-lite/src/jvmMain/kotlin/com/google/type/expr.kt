@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/expr.proto
package com.google.type

import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like
 * expression language. The syntax and semantics of CEL are documented at
 * https://github.com/google/cel-spec.
 *
 *  Example (Comparison):
 *
 *      title: "Summary size limit"     description: "Determines if a summary is less than 100
 * chars"     expression: "document.summary.size() < 100"
 *
 *  Example (Equality):
 *
 *      title: "Requestor is owner"     description: "Determines if requestor is the document owner"
 *     expression: "document.owner == request.auth.claims.email"
 *
 *  Example (Logic):
 *
 *      title: "Public documents"     description: "Determine whether the document should be
 * publicly visible"     expression: "document.type != 'private' && document.type != 'internal'"
 *
 *  Example (Data Manipulation):
 *
 *      title: "Notification string"     description: "Create a notification string with a
 * timestamp."     expression: "'New message received at ' + string(document.create_time)"
 *
 *  The exact variables and functions that may be referenced within an expression are determined by
 * the service that evaluates it. See the service documentation for additional information.
 */
@Deprecated("use v1")
@KtGeneratedMessage("google.type.Expr")
class Expr private constructor(
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    val expression: String,
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be
     * used e.g. in UIs which allow to enter the expression.
     */
    val title: String,
    /**
     * Optional. Description of the expression. This is a longer text which describes the
     * expression, e.g. when hovered over it in a UI.
     */
    val description: String,
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file
     * name and a position in the file.
     */
    val location: String,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (expression.isNotEmpty()) {
            result += sizeof(Tag(1)) + sizeof(expression)
        }
        if (title.isNotEmpty()) {
            result += sizeof(Tag(2)) + sizeof(title)
        }
        if (description.isNotEmpty()) {
            result += sizeof(Tag(3)) + sizeof(description)
        }
        if (location.isNotEmpty()) {
            result += sizeof(Tag(4)) + sizeof(location)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (expression.isNotEmpty()) {
            serializer.write(Tag(10)).write(expression)
        }
        if (title.isNotEmpty()) {
            serializer.write(Tag(18)).write(title)
        }
        if (description.isNotEmpty()) {
            serializer.write(Tag(26)).write(description)
        }
        if (location.isNotEmpty()) {
            serializer.write(Tag(34)).write(location)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is Expr &&
        other.expression == expression &&
        other.title == title &&
        other.description == description &&
        other.location == location &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + expression.hashCode()
        result = 31 * result + title.hashCode()
        result = 31 * result + description.hashCode()
        result = 31 * result + location.hashCode()
        return result
    }

    override fun toString(): String = "Expr(" +
        "expression=$expression, " +
        "title=$title, " +
        "description=$description, " +
        "location=$location" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: ExprDsl.() -> Unit): Expr = Expr.Deserializer {
        expression = this@Expr.expression
        title = this@Expr.title
        description = this@Expr.description
        location = this@Expr.location
        unknownFields = this@Expr.unknownFields
        dsl()
    }

    class ExprDsl {
        var expression: String = ""

        var title: String = ""

        var description: String = ""

        var location: String = ""

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): Expr = Expr(expression,
        title,
        description,
        location,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<Expr>, (ExprDsl.() -> Unit) -> Expr {
        override fun deserialize(deserializer: KtMessageDeserializer): Expr {
            var expression = ""
            var title = ""
            var description = ""
            var location = ""
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return Expr(expression,
                            title,
                            description,
                            location,
                            UnknownFieldSet.from(unknownFields))
                    10 -> expression = deserializer.readString()
                    18 -> title = deserializer.readString()
                    26 -> description = deserializer.readString()
                    34 -> location = deserializer.readString()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: ExprDsl.() -> Unit): Expr = ExprDsl().apply(dsl).build()
    }
}
