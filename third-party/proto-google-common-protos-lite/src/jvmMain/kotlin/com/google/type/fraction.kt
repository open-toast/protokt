@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/fraction.proto
package com.google.type

import com.toasttab.protokt.rt.Int64
import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit

/**
 * Represents a fraction in terms of a numerator divided by a denominator.
 */
@KtGeneratedMessage("google.type.Fraction")
class Fraction private constructor(
    /**
     * The numerator in the fraction, e.g. 2 in 2/3.
     */
    val numerator: Long,
    /**
     * The value by which the numerator is divided, e.g. 3 in 2/3. Must be positive.
     */
    val denominator: Long,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (numerator != 0L) {
            result += sizeof(Tag(1)) + sizeof(Int64(numerator))
        }
        if (denominator != 0L) {
            result += sizeof(Tag(2)) + sizeof(Int64(denominator))
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (numerator != 0L) {
            serializer.write(Tag(8)).write(Int64(numerator))
        }
        if (denominator != 0L) {
            serializer.write(Tag(16)).write(Int64(denominator))
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is Fraction &&
        other.numerator == numerator &&
        other.denominator == denominator &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + numerator.hashCode()
        result = 31 * result + denominator.hashCode()
        return result
    }

    override fun toString(): String = "Fraction(" +
        "numerator=$numerator, " +
        "denominator=$denominator" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: FractionDsl.() -> Unit): Fraction = Fraction.Deserializer {
        numerator = this@Fraction.numerator
        denominator = this@Fraction.denominator
        unknownFields = this@Fraction.unknownFields
        dsl()
    }

    class FractionDsl {
        var numerator: Long = 0L

        var denominator: Long = 0L

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): Fraction = Fraction(numerator,
        denominator,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<Fraction>,
            (FractionDsl.() -> Unit) -> Fraction {
        override fun deserialize(deserializer: KtMessageDeserializer): Fraction {
            var numerator = 0L
            var denominator = 0L
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return Fraction(numerator,
                            denominator,
                            UnknownFieldSet.from(unknownFields))
                    8 -> numerator = deserializer.readInt64()
                    16 -> denominator = deserializer.readInt64()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: FractionDsl.() -> Unit): Fraction =
                FractionDsl().apply(dsl).build()
    }
}
