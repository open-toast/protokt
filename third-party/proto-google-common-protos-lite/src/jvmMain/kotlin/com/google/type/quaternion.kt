@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/quaternion.proto
package com.google.type

import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * A quaternion is defined as the quotient of two directed lines in a three-dimensional space or
 * equivalently as the quotient of two Euclidean vectors (https://en.wikipedia.org/wiki/Quaternion).
 *
 *  Quaternions are often used in calculations involving three-dimensional rotations
 * (https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation), as they provide greater
 * mathematical robustness by avoiding the gimbal lock problems that can be encountered when using
 * Euler angles (https://en.wikipedia.org/wiki/Gimbal_lock).
 *
 *  Quaternions are generally represented in this form:
 *
 *      w + xi + yj + zk
 *
 *  where x, y, z, and w are real numbers, and i, j, and k are three imaginary numbers.
 *
 *  Our naming choice `(x, y, z, w)` comes from the desire to avoid confusion for those interested
 * in the geometric properties of the quaternion in the 3D Cartesian space. Other texts often use
 * alternative names or subscripts, such as `(a, b, c, d)`, `(1, i, j, k)`, or `(0, 1, 2, 3)`, which
 * are perhaps better suited for mathematical interpretations.
 *
 *  To avoid any confusion, as well as to maintain compatibility with a large number of software
 * libraries, the quaternions represented using the protocol buffer below *must* follow the Hamilton
 * convention, which defines `ij = k` (i.e. a right-handed algebra), and therefore:
 *
 *      i^2 = j^2 = k^2 = ijk = −1     ij = −ji = k     jk = −kj = i     ki = −ik = j
 *
 *  Please DO NOT use this to represent quaternions that follow the JPL convention, or any of the
 * other quaternion flavors out there.
 *
 *  Definitions:
 *
 *    - Quaternion norm (or magnitude): `sqrt(x^2 + y^2 + z^2 + w^2)`.   - Unit (or normalized)
 * quaternion: a quaternion whose norm is 1.   - Pure quaternion: a quaternion whose scalar component
 * (`w`) is 0.   - Rotation quaternion: a unit quaternion used to represent rotation.   - Orientation
 * quaternion: a unit quaternion used to represent orientation.
 *
 *  A quaternion can be normalized by dividing it by its norm. The resulting quaternion maintains
 * the same direction, but has a norm of 1, i.e. it moves on the unit sphere. This is generally
 * necessary for rotation and orientation quaternions, to avoid rounding errors:
 * https://en.wikipedia.org/wiki/Rotation_formalisms_in_three_dimensions
 *
 *  Note that `(x, y, z, w)` and `(-x, -y, -z, -w)` represent the same rotation, but normalization
 * would be even more useful, e.g. for comparison purposes, if it would produce a unique
 * representation. It is thus recommended that `w` be kept positive, which can be achieved by changing
 * all the signs when `w` is negative.
 */
@KtGeneratedMessage("google.type.Quaternion")
class Quaternion private constructor(
    /**
     * The x component.
     */
    val x: Double,
    /**
     * The y component.
     */
    val y: Double,
    /**
     * The z component.
     */
    val z: Double,
    /**
     * The scalar component.
     */
    val w: Double,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (x != 0.0) {
            result += sizeof(Tag(1)) + sizeof(x)
        }
        if (y != 0.0) {
            result += sizeof(Tag(2)) + sizeof(y)
        }
        if (z != 0.0) {
            result += sizeof(Tag(3)) + sizeof(z)
        }
        if (w != 0.0) {
            result += sizeof(Tag(4)) + sizeof(w)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (x != 0.0) {
            serializer.write(Tag(9)).write(x)
        }
        if (y != 0.0) {
            serializer.write(Tag(17)).write(y)
        }
        if (z != 0.0) {
            serializer.write(Tag(25)).write(z)
        }
        if (w != 0.0) {
            serializer.write(Tag(33)).write(w)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is Quaternion &&
        other.x == x &&
        other.y == y &&
        other.z == z &&
        other.w == w &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + x.hashCode()
        result = 31 * result + y.hashCode()
        result = 31 * result + z.hashCode()
        result = 31 * result + w.hashCode()
        return result
    }

    override fun toString(): String = "Quaternion(" +
        "x=$x, " +
        "y=$y, " +
        "z=$z, " +
        "w=$w" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: QuaternionDsl.() -> Unit): Quaternion = Quaternion.Deserializer {
        x = this@Quaternion.x
        y = this@Quaternion.y
        z = this@Quaternion.z
        w = this@Quaternion.w
        unknownFields = this@Quaternion.unknownFields
        dsl()
    }

    class QuaternionDsl {
        var x: Double = 0.0

        var y: Double = 0.0

        var z: Double = 0.0

        var w: Double = 0.0

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): Quaternion = Quaternion(x,
        y,
        z,
        w,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<Quaternion>,
            (QuaternionDsl.() -> Unit) -> Quaternion {
        override fun deserialize(deserializer: KtMessageDeserializer): Quaternion {
            var x = 0.0
            var y = 0.0
            var z = 0.0
            var w = 0.0
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return Quaternion(x,
                            y,
                            z,
                            w,
                            UnknownFieldSet.from(unknownFields))
                    9 -> x = deserializer.readDouble()
                    17 -> y = deserializer.readDouble()
                    25 -> z = deserializer.readDouble()
                    33 -> w = deserializer.readDouble()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: QuaternionDsl.() -> Unit): Quaternion =
                QuaternionDsl().apply(dsl).build()
    }
}
