@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/interval.proto
package com.google.type

import com.toasttab.protokt.Timestamp
import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end
 * (exclusive).
 *
 *  The start must be less than or equal to the end. When the start equals the end, the interval is
 * empty (matches no time). When both start and end are unspecified, the interval matches any time.
 */
@Deprecated("use v1")
@KtGeneratedMessage("google.type.Interval")
class Interval private constructor(
    /**
     * Optional. Inclusive start of the interval.
     *
     *  If specified, a Timestamp matching this interval will have to be the same or after the
     * start.
     */
    val startTime: Timestamp?,
    /**
     * Optional. Exclusive end of the interval.
     *
     *  If specified, a Timestamp matching this interval will have to be before the end.
     */
    val endTime: Timestamp?,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (startTime  != null) {
            result += sizeof(Tag(1)) + sizeof(startTime)
        }
        if (endTime  != null) {
            result += sizeof(Tag(2)) + sizeof(endTime)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (startTime  != null) {
            serializer.write(Tag(10)).write(startTime)
        }
        if (endTime  != null) {
            serializer.write(Tag(18)).write(endTime)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is Interval &&
        other.startTime == startTime &&
        other.endTime == endTime &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + startTime.hashCode()
        result = 31 * result + endTime.hashCode()
        return result
    }

    override fun toString(): String = "Interval(" +
        "startTime=$startTime, " +
        "endTime=$endTime" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: IntervalDsl.() -> Unit): Interval = Interval.Deserializer {
        startTime = this@Interval.startTime
        endTime = this@Interval.endTime
        unknownFields = this@Interval.unknownFields
        dsl()
    }

    class IntervalDsl {
        var startTime: Timestamp? = null

        var endTime: Timestamp? = null

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): Interval = Interval(startTime,
        endTime,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<Interval>,
            (IntervalDsl.() -> Unit) -> Interval {
        override fun deserialize(deserializer: KtMessageDeserializer): Interval {
            var startTime : Timestamp? = null
            var endTime : Timestamp? = null
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return Interval(startTime,
                            endTime,
                            UnknownFieldSet.from(unknownFields))
                    10 -> startTime = deserializer.readMessage(com.toasttab.protokt.Timestamp)
                    18 -> endTime = deserializer.readMessage(com.toasttab.protokt.Timestamp)
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: IntervalDsl.() -> Unit): Interval =
                IntervalDsl().apply(dsl).build()
    }
}
