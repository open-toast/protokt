@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/date.proto
package com.google.type

import com.toasttab.protokt.rt.Int32
import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone
 * are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar.
 * This can represent one of the following:
 *
 *  * A full date, with non-zero year, month, and day values * A month and day value, with a zero
 * year, such as an anniversary * A year on its own, with zero month and day values * A year and month
 * value, with a zero day, such as a credit card expiration date
 *
 *  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and
 * `google.protobuf.Timestamp`.
 */
@Deprecated("use v1")
@KtGeneratedMessage("google.type.Date")
class Date private constructor(
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    val year: Int,
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    val month: Int,
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year
     * by itself or a year and month where the day isn't significant.
     */
    val day: Int,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (year != 0) {
            result += sizeof(Tag(1)) + sizeof(Int32(year))
        }
        if (month != 0) {
            result += sizeof(Tag(2)) + sizeof(Int32(month))
        }
        if (day != 0) {
            result += sizeof(Tag(3)) + sizeof(Int32(day))
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (year != 0) {
            serializer.write(Tag(8)).write(Int32(year))
        }
        if (month != 0) {
            serializer.write(Tag(16)).write(Int32(month))
        }
        if (day != 0) {
            serializer.write(Tag(24)).write(Int32(day))
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is Date &&
        other.year == year &&
        other.month == month &&
        other.day == day &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + year.hashCode()
        result = 31 * result + month.hashCode()
        result = 31 * result + day.hashCode()
        return result
    }

    override fun toString(): String = "Date(" +
        "year=$year, " +
        "month=$month, " +
        "day=$day" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: DateDsl.() -> Unit): Date = Date.Deserializer {
        year = this@Date.year
        month = this@Date.month
        day = this@Date.day
        unknownFields = this@Date.unknownFields
        dsl()
    }

    class DateDsl {
        var year: Int = 0

        var month: Int = 0

        var day: Int = 0

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): Date = Date(year,
        month,
        day,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<Date>, (DateDsl.() -> Unit) -> Date {
        override fun deserialize(deserializer: KtMessageDeserializer): Date {
            var year = 0
            var month = 0
            var day = 0
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return Date(year,
                            month,
                            day,
                            UnknownFieldSet.from(unknownFields))
                    8 -> year = deserializer.readInt32()
                    16 -> month = deserializer.readInt32()
                    24 -> day = deserializer.readInt32()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: DateDsl.() -> Unit): Date = DateDsl().apply(dsl).build()
    }
}
