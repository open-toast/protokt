@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/latlng.proto
package com.google.type

import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to
 * represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to
 * the <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84 standard</a>. Values must
 * be within normalized ranges.
 */
@KtGeneratedMessage("google.type.LatLng")
class LatLng private constructor(
    /**
     * The latitude in degrees. It must be in the range [-90.0, +90.0].
     */
    val latitude: Double,
    /**
     * The longitude in degrees. It must be in the range [-180.0, +180.0].
     */
    val longitude: Double,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (latitude != 0.0) {
            result += sizeof(Tag(1)) + sizeof(latitude)
        }
        if (longitude != 0.0) {
            result += sizeof(Tag(2)) + sizeof(longitude)
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (latitude != 0.0) {
            serializer.write(Tag(9)).write(latitude)
        }
        if (longitude != 0.0) {
            serializer.write(Tag(17)).write(longitude)
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is LatLng &&
        other.latitude == latitude &&
        other.longitude == longitude &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + latitude.hashCode()
        result = 31 * result + longitude.hashCode()
        return result
    }

    override fun toString(): String = "LatLng(" +
        "latitude=$latitude, " +
        "longitude=$longitude" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: LatLngDsl.() -> Unit): LatLng = LatLng.Deserializer {
        latitude = this@LatLng.latitude
        longitude = this@LatLng.longitude
        unknownFields = this@LatLng.unknownFields
        dsl()
    }

    class LatLngDsl {
        var latitude: Double = 0.0

        var longitude: Double = 0.0

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): LatLng = LatLng(latitude,
        longitude,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<LatLng>, (LatLngDsl.() -> Unit) -> LatLng
            {
        override fun deserialize(deserializer: KtMessageDeserializer): LatLng {
            var latitude = 0.0
            var longitude = 0.0
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return LatLng(latitude,
                            longitude,
                            UnknownFieldSet.from(unknownFields))
                    9 -> latitude = deserializer.readDouble()
                    17 -> longitude = deserializer.readDouble()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: LatLngDsl.() -> Unit): LatLng =
                LatLngDsl().apply(dsl).build()
    }
}
