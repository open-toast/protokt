@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/color.proto
package com.google.type

import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * Represents a color in the RGBA color space. This representation is designed for simplicity of
 * conversion to/from color representations in various languages over compactness. For example, the
 * fields of this representation can be trivially provided to the constructor of `java.awt.Color` in
 * Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS;
 * and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript.
 *
 *  This reference page doesn't carry information about the absolute color space that should be used
 * to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications
 * should assume the sRGB color space.
 *
 *  When color equality needs to be decided, implementations, unless documented otherwise, treat two
 * colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5.
 *
 *  Example (Java):
 *
 *       import com.google.type.Color;
 *
 *       // ...      public static java.awt.Color fromProto(Color protocolor) {        float alpha =
 * protocolor.hasAlpha()            ? protocolor.getAlpha().getValue()            : 1.0;
 *
 *         return new java.awt.Color(            protocolor.getRed(),
 * protocolor.getGreen(),            protocolor.getBlue(),            alpha);      }
 *
 *       public static Color toProto(java.awt.Color color) {        float red = (float)
 * color.getRed();        float green = (float) color.getGreen();        float blue = (float)
 * color.getBlue();        float denominator = 255.0;        Color.Builder resultBuilder =
 * Color                .newBuilder()                .setRed(red / denominator)
 * .setGreen(green / denominator)                .setBlue(blue / denominator);        int alpha =
 * color.getAlpha();        if (alpha != 255) {          result.setAlpha(              FloatValue
 *            .newBuilder()                  .setValue(((float) alpha) / denominator)
 * .build());        }        return resultBuilder.build();      }      // ...
 *
 *  Example (iOS / Obj-C):
 *
 *       // ...      static UIColor* fromProto(Color* protocolor) {         float red = [protocolor
 * red];         float green = [protocolor green];         float blue = [protocolor blue];
 * FloatValue* alpha_wrapper = [protocolor alpha];         float alpha = 1.0;         if (alpha_wrapper
 * != nil) {           alpha = [alpha_wrapper value];         }         return [UIColor
 * colorWithRed:red green:green blue:blue alpha:alpha];      }
 *
 *       static Color* toProto(UIColor* color) {          CGFloat red, green, blue, alpha;
 * if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {            return nil;          }
 *        Color* result = [[Color alloc] init];          [result setRed:red];          [result
 * setGreen:green];          [result setBlue:blue];          if (alpha <= 0.9999) {            [result
 * setAlpha:floatWrapperWithValue(alpha)];          }          [result autorelease];          return
 * result;     }     // ...
 *
 *   Example (JavaScript):
 *
 *      // ...
 *
 *      var protoToCssColor = function(rgb_color) {        var redFrac = rgb_color.red || 0.0;
 *  var greenFrac = rgb_color.green || 0.0;        var blueFrac = rgb_color.blue || 0.0;        var red
 * = Math.floor(redFrac * 255);        var green = Math.floor(greenFrac * 255);        var blue =
 * Math.floor(blueFrac * 255);
 *
 *         if (!('alpha' in rgb_color)) {           return rgbToCssColor(red, green, blue);        }
 *
 *
 *         var alphaFrac = rgb_color.alpha.value || 0.0;        var rgbParams = [red, green,
 * blue].join(',');        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');     };
 *
 *      var rgbToCssColor = function(red, green, blue) {       var rgbNumber = new Number((red <<
 * 16) | (green << 8) | blue);       var hexString = rgbNumber.toString(16);       var missingZeros =
 * 6 - hexString.length;       var resultBuilder = ['#'];       for (var i = 0; i < missingZeros; i++)
 * {          resultBuilder.push('0');       }       resultBuilder.push(hexString);       return
 * resultBuilder.join('');     };
 *
 *      // ...
 */
@KtGeneratedMessage("google.type.Color")
class Color private constructor(
    /**
     * The amount of red in the color as a value in the interval [0, 1].
     */
    val red: Float,
    /**
     * The amount of green in the color as a value in the interval [0, 1].
     */
    val green: Float,
    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     */
    val blue: Float,
    /**
     * The fraction of this color that should be applied to the pixel. That is, the final pixel
     * color is defined by the equation:
     *
     *    `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     *
     *  This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0
     * corresponds to a completely transparent color. This uses a wrapper message rather than a simple
     * float scalar so that it is possible to distinguish between a default value and the value being
     * unset. If omitted, this color object is rendered as a solid color (as if the alpha value had
     * been explicitly given a value of 1.0).
     */
    val alpha: Float?,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (red != 0.0F) {
            result += sizeof(Tag(1)) + sizeof(red)
        }
        if (green != 0.0F) {
            result += sizeof(Tag(2)) + sizeof(green)
        }
        if (blue != 0.0F) {
            result += sizeof(Tag(3)) + sizeof(blue)
        }
        if (alpha  != null) {
            result += sizeof(Tag(4)) +
                    sizeof(com.toasttab.protokt.FloatValueConverter.unwrap(alpha))
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (red != 0.0F) {
            serializer.write(Tag(13)).write(red)
        }
        if (green != 0.0F) {
            serializer.write(Tag(21)).write(green)
        }
        if (blue != 0.0F) {
            serializer.write(Tag(29)).write(blue)
        }
        if (alpha  != null) {
            serializer.write(Tag(34)).write(com.toasttab.protokt.FloatValueConverter.unwrap(alpha))
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is Color &&
        other.red == red &&
        other.green == green &&
        other.blue == blue &&
        other.alpha == alpha &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + red.hashCode()
        result = 31 * result + green.hashCode()
        result = 31 * result + blue.hashCode()
        result = 31 * result + alpha.hashCode()
        return result
    }

    override fun toString(): String = "Color(" +
        "red=$red, " +
        "green=$green, " +
        "blue=$blue, " +
        "alpha=$alpha" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: ColorDsl.() -> Unit): Color = Color.Deserializer {
        red = this@Color.red
        green = this@Color.green
        blue = this@Color.blue
        alpha = this@Color.alpha
        unknownFields = this@Color.unknownFields
        dsl()
    }

    class ColorDsl {
        var red: Float = 0.0F

        var green: Float = 0.0F

        var blue: Float = 0.0F

        var alpha: Float? = null

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): Color = Color(red,
        green,
        blue,
        alpha,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<Color>, (ColorDsl.() -> Unit) -> Color {
        override fun deserialize(deserializer: KtMessageDeserializer): Color {
            var red = 0.0F
            var green = 0.0F
            var blue = 0.0F
            var alpha : Float? = null
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return Color(red,
                            green,
                            blue,
                            alpha,
                            UnknownFieldSet.from(unknownFields))
                    13 -> red = deserializer.readFloat()
                    21 -> green = deserializer.readFloat()
                    29 -> blue = deserializer.readFloat()
                    34 -> alpha =
                            com.toasttab.protokt.FloatValueConverter.wrap(deserializer.readMessage(com.toasttab.protokt.FloatValue))
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: ColorDsl.() -> Unit): Color = ColorDsl().apply(dsl).build()
    }
}
