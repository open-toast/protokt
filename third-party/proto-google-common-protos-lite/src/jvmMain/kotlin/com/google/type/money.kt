@file:Suppress("DEPRECATION")

// Generated by protokt version 0.12.1. Do not modify.
// Source: google/type/money.proto
package com.google.type

import com.toasttab.protokt.rt.Int32
import com.toasttab.protokt.rt.Int64
import com.toasttab.protokt.rt.KtDeserializer
import com.toasttab.protokt.rt.KtGeneratedMessage
import com.toasttab.protokt.rt.KtMessage
import com.toasttab.protokt.rt.KtMessageDeserializer
import com.toasttab.protokt.rt.KtMessageSerializer
import com.toasttab.protokt.rt.Tag
import com.toasttab.protokt.rt.UnknownFieldSet
import com.toasttab.protokt.rt.sizeof
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit

/**
 * Represents an amount of money with its currency type.
 */
@Deprecated("use v1")
@KtGeneratedMessage("google.type.Money")
class Money private constructor(
    /**
     * The three-letter currency code defined in ISO 4217.
     */
    val currencyCode: String,
    /**
     * The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one
     * US dollar.
     */
    val units: Long,
    /**
     * Number of nano (10^-9) units of the amount. The value must be between -999,999,999
     * and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units`
     * is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be
     * negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
     */
    val nanos: Int,
    val unknownFields: UnknownFieldSet = UnknownFieldSet.empty(),
) : KtMessage {
    override val messageSize: Int by lazy { messageSize() }

    private fun messageSize(): Int {
        var result = 0
        if (currencyCode.isNotEmpty()) {
            result += sizeof(Tag(1)) + sizeof(currencyCode)
        }
        if (units != 0L) {
            result += sizeof(Tag(2)) + sizeof(Int64(units))
        }
        if (nanos != 0) {
            result += sizeof(Tag(3)) + sizeof(Int32(nanos))
        }
        result += unknownFields.size()
        return result
    }

    override fun serialize(serializer: KtMessageSerializer) {
        if (currencyCode.isNotEmpty()) {
            serializer.write(Tag(10)).write(currencyCode)
        }
        if (units != 0L) {
            serializer.write(Tag(16)).write(Int64(units))
        }
        if (nanos != 0) {
            serializer.write(Tag(24)).write(Int32(nanos))
        }
        serializer.writeUnknown(unknownFields)
    }

    override fun equals(other: Any?): Boolean = other is Money &&
        other.currencyCode == currencyCode &&
        other.units == units &&
        other.nanos == nanos &&
        other.unknownFields == unknownFields

    override fun hashCode(): Int {
        var result = unknownFields.hashCode()
        result = 31 * result + currencyCode.hashCode()
        result = 31 * result + units.hashCode()
        result = 31 * result + nanos.hashCode()
        return result
    }

    override fun toString(): String = "Money(" +
        "currencyCode=$currencyCode, " +
        "units=$units, " +
        "nanos=$nanos" +
        "${if (unknownFields.isEmpty()) "" else ", unknownFields=$unknownFields"})"

    fun copy(dsl: MoneyDsl.() -> Unit): Money = Money.Deserializer {
        currencyCode = this@Money.currencyCode
        units = this@Money.units
        nanos = this@Money.nanos
        unknownFields = this@Money.unknownFields
        dsl()
    }

    class MoneyDsl {
        var currencyCode: String = ""

        var units: Long = 0L

        var nanos: Int = 0

        var unknownFields: UnknownFieldSet = UnknownFieldSet.empty()

        fun build(): Money = Money(currencyCode,
        units,
        nanos,
         unknownFields)
    }

    companion object Deserializer : KtDeserializer<Money>, (MoneyDsl.() -> Unit) -> Money {
        override fun deserialize(deserializer: KtMessageDeserializer): Money {
            var currencyCode = ""
            var units = 0L
            var nanos = 0
            var unknownFields: UnknownFieldSet.Builder? = null
            while (true) {
                when(deserializer.readTag()) {
                    0 -> return Money(currencyCode,
                            units,
                            nanos,
                            UnknownFieldSet.from(unknownFields))
                    10 -> currencyCode = deserializer.readString()
                    16 -> units = deserializer.readInt64()
                    24 -> nanos = deserializer.readInt32()
                    else -> unknownFields = (unknownFields ?:
                            UnknownFieldSet.Builder()).also {it.add(deserializer.readUnknown()) }
                }
            }
        }

        override fun invoke(dsl: MoneyDsl.() -> Unit): Money = MoneyDsl().apply(dsl).build()
    }
}
